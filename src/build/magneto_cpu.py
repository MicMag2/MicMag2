# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _magneto_cpu.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_magneto_cpu', [dirname(__file__)])
        except ImportError:
            import _magneto_cpu
            return _magneto_cpu
        if fp is not None:
            try:
                _mod = imp.load_module('_magneto_cpu', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _magneto_cpu = swig_import_helper()
    del swig_import_helper
else:
    import _magneto_cpu
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _magneto_cpu.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_magneto_cpu.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_magneto_cpu.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_magneto_cpu.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_magneto_cpu.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_magneto_cpu.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_magneto_cpu.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_magneto_cpu.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_magneto_cpu.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_magneto_cpu.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_magneto_cpu.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_magneto_cpu.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_magneto_cpu.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_magneto_cpu.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_magneto_cpu.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_magneto_cpu.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_magneto_cpu.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _magneto_cpu.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _magneto_cpu.StringVector_swiginit(self,_magneto_cpu.new_StringVector(*args))
    __swig_destroy__ = _magneto_cpu.delete_StringVector
StringVector.iterator = new_instancemethod(_magneto_cpu.StringVector_iterator,None,StringVector)
StringVector.__nonzero__ = new_instancemethod(_magneto_cpu.StringVector___nonzero__,None,StringVector)
StringVector.__bool__ = new_instancemethod(_magneto_cpu.StringVector___bool__,None,StringVector)
StringVector.__len__ = new_instancemethod(_magneto_cpu.StringVector___len__,None,StringVector)
StringVector.pop = new_instancemethod(_magneto_cpu.StringVector_pop,None,StringVector)
StringVector.__getslice__ = new_instancemethod(_magneto_cpu.StringVector___getslice__,None,StringVector)
StringVector.__setslice__ = new_instancemethod(_magneto_cpu.StringVector___setslice__,None,StringVector)
StringVector.__delslice__ = new_instancemethod(_magneto_cpu.StringVector___delslice__,None,StringVector)
StringVector.__delitem__ = new_instancemethod(_magneto_cpu.StringVector___delitem__,None,StringVector)
StringVector.__getitem__ = new_instancemethod(_magneto_cpu.StringVector___getitem__,None,StringVector)
StringVector.__setitem__ = new_instancemethod(_magneto_cpu.StringVector___setitem__,None,StringVector)
StringVector.append = new_instancemethod(_magneto_cpu.StringVector_append,None,StringVector)
StringVector.empty = new_instancemethod(_magneto_cpu.StringVector_empty,None,StringVector)
StringVector.size = new_instancemethod(_magneto_cpu.StringVector_size,None,StringVector)
StringVector.clear = new_instancemethod(_magneto_cpu.StringVector_clear,None,StringVector)
StringVector.swap = new_instancemethod(_magneto_cpu.StringVector_swap,None,StringVector)
StringVector.get_allocator = new_instancemethod(_magneto_cpu.StringVector_get_allocator,None,StringVector)
StringVector.begin = new_instancemethod(_magneto_cpu.StringVector_begin,None,StringVector)
StringVector.end = new_instancemethod(_magneto_cpu.StringVector_end,None,StringVector)
StringVector.rbegin = new_instancemethod(_magneto_cpu.StringVector_rbegin,None,StringVector)
StringVector.rend = new_instancemethod(_magneto_cpu.StringVector_rend,None,StringVector)
StringVector.pop_back = new_instancemethod(_magneto_cpu.StringVector_pop_back,None,StringVector)
StringVector.erase = new_instancemethod(_magneto_cpu.StringVector_erase,None,StringVector)
StringVector.push_back = new_instancemethod(_magneto_cpu.StringVector_push_back,None,StringVector)
StringVector.front = new_instancemethod(_magneto_cpu.StringVector_front,None,StringVector)
StringVector.back = new_instancemethod(_magneto_cpu.StringVector_back,None,StringVector)
StringVector.assign = new_instancemethod(_magneto_cpu.StringVector_assign,None,StringVector)
StringVector.resize = new_instancemethod(_magneto_cpu.StringVector_resize,None,StringVector)
StringVector.insert = new_instancemethod(_magneto_cpu.StringVector_insert,None,StringVector)
StringVector.reserve = new_instancemethod(_magneto_cpu.StringVector_reserve,None,StringVector)
StringVector.capacity = new_instancemethod(_magneto_cpu.StringVector_capacity,None,StringVector)
StringVector_swigregister = _magneto_cpu.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _magneto_cpu.IntVector_swiginit(self,_magneto_cpu.new_IntVector(*args))
    __swig_destroy__ = _magneto_cpu.delete_IntVector
IntVector.iterator = new_instancemethod(_magneto_cpu.IntVector_iterator,None,IntVector)
IntVector.__nonzero__ = new_instancemethod(_magneto_cpu.IntVector___nonzero__,None,IntVector)
IntVector.__bool__ = new_instancemethod(_magneto_cpu.IntVector___bool__,None,IntVector)
IntVector.__len__ = new_instancemethod(_magneto_cpu.IntVector___len__,None,IntVector)
IntVector.pop = new_instancemethod(_magneto_cpu.IntVector_pop,None,IntVector)
IntVector.__getslice__ = new_instancemethod(_magneto_cpu.IntVector___getslice__,None,IntVector)
IntVector.__setslice__ = new_instancemethod(_magneto_cpu.IntVector___setslice__,None,IntVector)
IntVector.__delslice__ = new_instancemethod(_magneto_cpu.IntVector___delslice__,None,IntVector)
IntVector.__delitem__ = new_instancemethod(_magneto_cpu.IntVector___delitem__,None,IntVector)
IntVector.__getitem__ = new_instancemethod(_magneto_cpu.IntVector___getitem__,None,IntVector)
IntVector.__setitem__ = new_instancemethod(_magneto_cpu.IntVector___setitem__,None,IntVector)
IntVector.append = new_instancemethod(_magneto_cpu.IntVector_append,None,IntVector)
IntVector.empty = new_instancemethod(_magneto_cpu.IntVector_empty,None,IntVector)
IntVector.size = new_instancemethod(_magneto_cpu.IntVector_size,None,IntVector)
IntVector.clear = new_instancemethod(_magneto_cpu.IntVector_clear,None,IntVector)
IntVector.swap = new_instancemethod(_magneto_cpu.IntVector_swap,None,IntVector)
IntVector.get_allocator = new_instancemethod(_magneto_cpu.IntVector_get_allocator,None,IntVector)
IntVector.begin = new_instancemethod(_magneto_cpu.IntVector_begin,None,IntVector)
IntVector.end = new_instancemethod(_magneto_cpu.IntVector_end,None,IntVector)
IntVector.rbegin = new_instancemethod(_magneto_cpu.IntVector_rbegin,None,IntVector)
IntVector.rend = new_instancemethod(_magneto_cpu.IntVector_rend,None,IntVector)
IntVector.pop_back = new_instancemethod(_magneto_cpu.IntVector_pop_back,None,IntVector)
IntVector.erase = new_instancemethod(_magneto_cpu.IntVector_erase,None,IntVector)
IntVector.push_back = new_instancemethod(_magneto_cpu.IntVector_push_back,None,IntVector)
IntVector.front = new_instancemethod(_magneto_cpu.IntVector_front,None,IntVector)
IntVector.back = new_instancemethod(_magneto_cpu.IntVector_back,None,IntVector)
IntVector.assign = new_instancemethod(_magneto_cpu.IntVector_assign,None,IntVector)
IntVector.resize = new_instancemethod(_magneto_cpu.IntVector_resize,None,IntVector)
IntVector.insert = new_instancemethod(_magneto_cpu.IntVector_insert,None,IntVector)
IntVector.reserve = new_instancemethod(_magneto_cpu.IntVector_reserve,None,IntVector)
IntVector.capacity = new_instancemethod(_magneto_cpu.IntVector_capacity,None,IntVector)
IntVector_swigregister = _magneto_cpu.IntVector_swigregister
IntVector_swigregister(IntVector)


def matty_initialize():
  return _magneto_cpu.matty_initialize()
matty_initialize = _magneto_cpu.matty_initialize

def matty_deinitialize():
  return _magneto_cpu.matty_deinitialize()
matty_deinitialize = _magneto_cpu.matty_deinitialize

def linearInterpolate(*args):
  return _magneto_cpu.linearInterpolate(*args)
linearInterpolate = _magneto_cpu.linearInterpolate

def findExtremum(*args):
  return _magneto_cpu.findExtremum(*args)
findExtremum = _magneto_cpu.findExtremum

def fftn(*args):
  return _magneto_cpu.fftn(*args)
fftn = _magneto_cpu.fftn

def ifftn(*args):
  return _magneto_cpu.ifftn(*args)
ifftn = _magneto_cpu.ifftn
class Shape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.Shape_swiginit(self,_magneto_cpu.new_Shape(*args))
    __swig_destroy__ = _magneto_cpu.delete_Shape
Shape.getLinIdx = new_instancemethod(_magneto_cpu.Shape_getLinIdx,None,Shape)
Shape.getDim = new_instancemethod(_magneto_cpu.Shape_getDim,None,Shape)
Shape.getDims = new_instancemethod(_magneto_cpu.Shape_getDims,None,Shape)
Shape.getStride = new_instancemethod(_magneto_cpu.Shape_getStride,None,Shape)
Shape.getStrides = new_instancemethod(_magneto_cpu.Shape_getStrides,None,Shape)
Shape.getRank = new_instancemethod(_magneto_cpu.Shape_getRank,None,Shape)
Shape.getNumEl = new_instancemethod(_magneto_cpu.Shape_getNumEl,None,Shape)
Shape.sameDims = new_instancemethod(_magneto_cpu.Shape_sameDims,None,Shape)
Shape_swigregister = _magneto_cpu.Shape_swigregister
Shape_swigregister(Shape)

class AbstractMatrix(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _magneto_cpu.delete_AbstractMatrix
AbstractMatrix.getShape = new_instancemethod(_magneto_cpu.AbstractMatrix_getShape,None,AbstractMatrix)
AbstractMatrix.isUniform = new_instancemethod(_magneto_cpu.AbstractMatrix_isUniform,None,AbstractMatrix)
AbstractMatrix.isWriteLocked = new_instancemethod(_magneto_cpu.AbstractMatrix_isWriteLocked,None,AbstractMatrix)
AbstractMatrix.isLocked = new_instancemethod(_magneto_cpu.AbstractMatrix_isLocked,None,AbstractMatrix)
AbstractMatrix.inspect = new_instancemethod(_magneto_cpu.AbstractMatrix_inspect,None,AbstractMatrix)
AbstractMatrix.flush = new_instancemethod(_magneto_cpu.AbstractMatrix_flush,None,AbstractMatrix)
AbstractMatrix.dimX = new_instancemethod(_magneto_cpu.AbstractMatrix_dimX,None,AbstractMatrix)
AbstractMatrix.dimY = new_instancemethod(_magneto_cpu.AbstractMatrix_dimY,None,AbstractMatrix)
AbstractMatrix.dimZ = new_instancemethod(_magneto_cpu.AbstractMatrix_dimZ,None,AbstractMatrix)
AbstractMatrix.size = new_instancemethod(_magneto_cpu.AbstractMatrix_size,None,AbstractMatrix)
AbstractMatrix.markUninitialized = new_instancemethod(_magneto_cpu.AbstractMatrix_markUninitialized,None,AbstractMatrix)
AbstractMatrix_swigregister = _magneto_cpu.AbstractMatrix_swigregister
AbstractMatrix_swigregister(AbstractMatrix)

class Matrix(AbstractMatrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.Matrix_swiginit(self,_magneto_cpu.new_Matrix(*args))
    __swig_destroy__ = _magneto_cpu.delete_Matrix
Matrix.swap = new_instancemethod(_magneto_cpu.Matrix_swap,None,Matrix)
Matrix.clear = new_instancemethod(_magneto_cpu.Matrix_clear,None,Matrix)
Matrix.fill = new_instancemethod(_magneto_cpu.Matrix_fill,None,Matrix)
Matrix.assign = new_instancemethod(_magneto_cpu.Matrix_assign,None,Matrix)
Matrix.scale = new_instancemethod(_magneto_cpu.Matrix_scale,None,Matrix)
Matrix.add = new_instancemethod(_magneto_cpu.Matrix_add,None,Matrix)
Matrix.multiply = new_instancemethod(_magneto_cpu.Matrix_multiply,None,Matrix)
Matrix.divide = new_instancemethod(_magneto_cpu.Matrix_divide,None,Matrix)
Matrix.randomize = new_instancemethod(_magneto_cpu.Matrix_randomize,None,Matrix)
Matrix.maximum = new_instancemethod(_magneto_cpu.Matrix_maximum,None,Matrix)
Matrix.average = new_instancemethod(_magneto_cpu.Matrix_average,None,Matrix)
Matrix.sum = new_instancemethod(_magneto_cpu.Matrix_sum,None,Matrix)
Matrix.getUniformValue = new_instancemethod(_magneto_cpu.Matrix_getUniformValue,None,Matrix)
Matrix.set = new_instancemethod(_magneto_cpu.Matrix_set,None,Matrix)
Matrix.get = new_instancemethod(_magneto_cpu.Matrix_get,None,Matrix)
Matrix.toByteArray = new_instancemethod(_magneto_cpu.Matrix_toByteArray,None,Matrix)
Matrix.fromByteArray = new_instancemethod(_magneto_cpu.Matrix_fromByteArray,None,Matrix)
Matrix_swigregister = _magneto_cpu.Matrix_swigregister
Matrix_swigregister(Matrix)

class VectorMatrix(AbstractMatrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.VectorMatrix_swiginit(self,_magneto_cpu.new_VectorMatrix(*args))
    __swig_destroy__ = _magneto_cpu.delete_VectorMatrix
VectorMatrix.swap = new_instancemethod(_magneto_cpu.VectorMatrix_swap,None,VectorMatrix)
VectorMatrix.clear = new_instancemethod(_magneto_cpu.VectorMatrix_clear,None,VectorMatrix)
VectorMatrix.fill = new_instancemethod(_magneto_cpu.VectorMatrix_fill,None,VectorMatrix)
VectorMatrix.assign = new_instancemethod(_magneto_cpu.VectorMatrix_assign,None,VectorMatrix)
VectorMatrix.scale = new_instancemethod(_magneto_cpu.VectorMatrix_scale,None,VectorMatrix)
VectorMatrix.scale_by_vector = new_instancemethod(_magneto_cpu.VectorMatrix_scale_by_vector,None,VectorMatrix)
VectorMatrix.add = new_instancemethod(_magneto_cpu.VectorMatrix_add,None,VectorMatrix)
VectorMatrix.randomize = new_instancemethod(_magneto_cpu.VectorMatrix_randomize,None,VectorMatrix)
VectorMatrix.normalize = new_instancemethod(_magneto_cpu.VectorMatrix_normalize,None,VectorMatrix)
VectorMatrix.absMax = new_instancemethod(_magneto_cpu.VectorMatrix_absMax,None,VectorMatrix)
VectorMatrix.dotSum = new_instancemethod(_magneto_cpu.VectorMatrix_dotSum,None,VectorMatrix)
VectorMatrix.maximum = new_instancemethod(_magneto_cpu.VectorMatrix_maximum,None,VectorMatrix)
VectorMatrix.average = new_instancemethod(_magneto_cpu.VectorMatrix_average,None,VectorMatrix)
VectorMatrix.sum = new_instancemethod(_magneto_cpu.VectorMatrix_sum,None,VectorMatrix)
VectorMatrix.getUniformValue = new_instancemethod(_magneto_cpu.VectorMatrix_getUniformValue,None,VectorMatrix)
VectorMatrix.set = new_instancemethod(_magneto_cpu.VectorMatrix_set,None,VectorMatrix)
VectorMatrix.get = new_instancemethod(_magneto_cpu.VectorMatrix_get,None,VectorMatrix)
VectorMatrix.toByteArray = new_instancemethod(_magneto_cpu.VectorMatrix_toByteArray,None,VectorMatrix)
VectorMatrix.fromByteArray = new_instancemethod(_magneto_cpu.VectorMatrix_fromByteArray,None,VectorMatrix)
VectorMatrix_swigregister = _magneto_cpu.VectorMatrix_swigregister
VectorMatrix_swigregister(VectorMatrix)

class ComplexMatrix(AbstractMatrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.ComplexMatrix_swiginit(self,_magneto_cpu.new_ComplexMatrix(*args))
    __swig_destroy__ = _magneto_cpu.delete_ComplexMatrix
ComplexMatrix.clear = new_instancemethod(_magneto_cpu.ComplexMatrix_clear,None,ComplexMatrix)
ComplexMatrix.fill = new_instancemethod(_magneto_cpu.ComplexMatrix_fill,None,ComplexMatrix)
ComplexMatrix.assign = new_instancemethod(_magneto_cpu.ComplexMatrix_assign,None,ComplexMatrix)
ComplexMatrix.getUniformValue = new_instancemethod(_magneto_cpu.ComplexMatrix_getUniformValue,None,ComplexMatrix)
ComplexMatrix_swigregister = _magneto_cpu.ComplexMatrix_swigregister
ComplexMatrix_swigregister(ComplexMatrix)

def extend():

  def get_shape(self):
    sh = self.getShape()
    return (sh.getDim(0), sh.getDim(1), sh.getDim(2))
    
  def get_rank(self):
    sh = self.getShape()
    return sh.getRank()
    
  def get_uniform_value(self):
    if not self.isUniform():
      raise ValueError("VectorMatrix must be uniform in order to access the uniform_value property!")
    return self.getUniformValue()
    
  def the_repr(self):
     return  "VectorMatrix(%r)" % (self.shape,)
  
  AbstractMatrix.shape         = property(get_shape)
  AbstractMatrix.rank          = property(get_rank)
  AbstractMatrix.uniform_value = property(get_uniform_value)

  VectorMatrix.element_size    = property(lambda self: 3)
  VectorMatrix.__repr__        = lambda self: "VectorMatrix(%r)" % (self.shape,)

  Matrix.element_size          = property(lambda self: 1)
  Matrix.__repr__              = lambda self: "Matrix(%r)" % (self.shape,)

  ComplexMatrix.__repr__       = lambda self: "ComplexMatrix(%r)" % (self.shape,)
  ComplexMatrix.element_size   = property(lambda self: 3)

  def vector_matrix_to_numpy(self):
    # Get raw data
    data = str(self.toByteArray())
  
    # Convert to numpy array
    try:
      import numpy as np
    except ImportError:
      raise ImportError("numpy library not found!")
    N = np.fromstring(data, dtype=np.float64, count=3*self.size())
    N.shape = self.shape + (3,)
    N.strides = (N.itemsize * 3, N.itemsize * 3 * self.dimX(), N.itemsize * 3 * self.dimX() * self.dimY(), N.itemsize)
    return N

  def vector_matrix_from_numpy(self, N):
    try:
      import numpy as np
    except ImportError:
      raise ImportError("numpy library not found!")
    # error handling - test for shape and data type
    if(N.ndim != 4):
      raise ValueError("VectorField.from_numpy(N): N.ndim must be 4")
    if(N.shape[3] != 3):
      raise ValueError("VectorField.from_numpy(N): N.shape[3] must be 3")
    if(N.shape[:3] != self.shape):
      raise ValueError("VectorField.from_numpy(N): N.shape[:3] must be the same as the VectorField's dimension")
    try:
      N = N.astype(float)
    except:
      raise ValueError('VectorField.from_numpy(N): N must be convertable to float')
    self.fromByteArray(np.swapaxes(N,2,0).flatten().tostring(order='C'))

  VectorMatrix.to_numpy   = vector_matrix_to_numpy
  VectorMatrix.from_numpy = vector_matrix_from_numpy

  def matrix_to_numpy(self):
    # Get raw data
    data = str(self.toByteArray())
  
    # Convert to numpy array
    try:
      import numpy as np
    except ImportError:
      raise ImportError("numpy library not found!")
    N = np.fromstring(data, dtype=np.float64, count=self.size())
    N.shape = self.shape
    N.strides = (N.itemsize, N.itemsize * self.dimX(), N.itemsize * self.dimX() * self.dimY())
    return N

  def matrix_from_numpy(self, N):
    try:
      import numpy as np
    except ImportError:
      raise ImportError("numpy library not found!")
    # error handling - test for shape and data type
    if(N.shape != self.shape):
      raise ValueError("Field.from_numpy(N): N.shape must be the same as the Field's dimension")
    try:
      N = N.astype(float)
    except:
      raise ValueError("Field.from_numpy(N): N must be convertable to float")
    self.fromByteArray(np.swapaxes(N,2,0).flatten().tostring(order='C'))

  Matrix.to_numpy   = matrix_to_numpy
  Matrix.from_numpy = matrix_from_numpy

extend()
del extend

matty_initialize()



def exchange(*args):
  return _magneto_cpu.exchange(*args)
exchange = _magneto_cpu.exchange

def fs_exchange(*args):
  return _magneto_cpu.fs_exchange(*args)
fs_exchange = _magneto_cpu.fs_exchange

def llge(*args):
  return _magneto_cpu.llge(*args)
llge = _magneto_cpu.llge

def Hmm(*args):
  return _magneto_cpu.Hmm(*args)
Hmm = _magneto_cpu.Hmm

def Hhb(*args):
  return _magneto_cpu.Hhb(*args)
Hhb = _magneto_cpu.Hhb
PADDING_DISABLE = _magneto_cpu.PADDING_DISABLE
PADDING_ROUND_2 = _magneto_cpu.PADDING_ROUND_2
PADDING_ROUND_4 = _magneto_cpu.PADDING_ROUND_4
PADDING_ROUND_8 = _magneto_cpu.PADDING_ROUND_8
PADDING_ROUND_POT = _magneto_cpu.PADDING_ROUND_POT
PADDING_SMALL_PRIME_FACTORS = _magneto_cpu.PADDING_SMALL_PRIME_FACTORS

def GenerateDemagTensor(*args):
  return _magneto_cpu.GenerateDemagTensor(*args)
GenerateDemagTensor = _magneto_cpu.GenerateDemagTensor

def fs_GenerateDemagTensor(*args):
  return _magneto_cpu.fs_GenerateDemagTensor(*args)
fs_GenerateDemagTensor = _magneto_cpu.fs_GenerateDemagTensor

def GeneratePhiDemagTensor(*args):
  return _magneto_cpu.GeneratePhiDemagTensor(*args)
GeneratePhiDemagTensor = _magneto_cpu.GeneratePhiDemagTensor
INFINITE_NONE = _magneto_cpu.INFINITE_NONE
INFINITE_POS_X = _magneto_cpu.INFINITE_POS_X
INFINITE_NEG_X = _magneto_cpu.INFINITE_NEG_X
INFINITE_POS_Y = _magneto_cpu.INFINITE_POS_Y
INFINITE_NEG_Y = _magneto_cpu.INFINITE_NEG_Y
INFINITE_POS_Z = _magneto_cpu.INFINITE_POS_Z
INFINITE_NEG_Z = _magneto_cpu.INFINITE_NEG_Z

def CalculateStrayfieldForCuboid(*args):
  return _magneto_cpu.CalculateStrayfieldForCuboid(*args)
CalculateStrayfieldForCuboid = _magneto_cpu.CalculateStrayfieldForCuboid

def uniaxial_anisotropy(*args):
  return _magneto_cpu.uniaxial_anisotropy(*args)
uniaxial_anisotropy = _magneto_cpu.uniaxial_anisotropy

def cubic_anisotropy(*args):
  return _magneto_cpu.cubic_anisotropy(*args)
cubic_anisotropy = _magneto_cpu.cubic_anisotropy

def fs_uniaxial_anisotropy(*args):
  return _magneto_cpu.fs_uniaxial_anisotropy(*args)
fs_uniaxial_anisotropy = _magneto_cpu.fs_uniaxial_anisotropy

def fs_cubic_anisotropy(*args):
  return _magneto_cpu.fs_cubic_anisotropy(*args)
fs_cubic_anisotropy = _magneto_cpu.fs_cubic_anisotropy

def fdm_temperature(*args):
  return _magneto_cpu.fdm_temperature(*args)
fdm_temperature = _magneto_cpu.fdm_temperature

def fs_fdm_temperature(*args):
  return _magneto_cpu._fs_fdm_temperature(*args)
fs_fdm_temperature = _fs_magneto_cpu.fdm_temperature


def fdm_zhangli(*args):
  return _magneto_cpu.fdm_zhangli(*args)
fdm_zhangli = _magneto_cpu.fdm_zhangli

def fdm_slonchewski(*args):
  return _magneto_cpu.fdm_slonchewski(*args)
fdm_slonchewski = _magneto_cpu.fdm_slonchewski
OMF_FORMAT_ASCII = _magneto_cpu.OMF_FORMAT_ASCII
OMF_FORMAT_BINARY_4 = _magneto_cpu.OMF_FORMAT_BINARY_4
OMF_FORMAT_BINARY_8 = _magneto_cpu.OMF_FORMAT_BINARY_8
class OMFHeader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        _magneto_cpu.OMFHeader_swiginit(self,_magneto_cpu.new_OMFHeader())
    __swig_destroy__ = _magneto_cpu.delete_OMFHeader
    Title = _swig_property(_magneto_cpu.OMFHeader_Title_get, _magneto_cpu.OMFHeader_Title_set)
    Desc = _swig_property(_magneto_cpu.OMFHeader_Desc_get, _magneto_cpu.OMFHeader_Desc_set)
    meshunit = _swig_property(_magneto_cpu.OMFHeader_meshunit_get, _magneto_cpu.OMFHeader_meshunit_set)
    valueunit = _swig_property(_magneto_cpu.OMFHeader_valueunit_get, _magneto_cpu.OMFHeader_valueunit_set)
    valuemultiplier = _swig_property(_magneto_cpu.OMFHeader_valuemultiplier_get, _magneto_cpu.OMFHeader_valuemultiplier_set)
    xmin = _swig_property(_magneto_cpu.OMFHeader_xmin_get, _magneto_cpu.OMFHeader_xmin_set)
    ymin = _swig_property(_magneto_cpu.OMFHeader_ymin_get, _magneto_cpu.OMFHeader_ymin_set)
    zmin = _swig_property(_magneto_cpu.OMFHeader_zmin_get, _magneto_cpu.OMFHeader_zmin_set)
    xmax = _swig_property(_magneto_cpu.OMFHeader_xmax_get, _magneto_cpu.OMFHeader_xmax_set)
    ymax = _swig_property(_magneto_cpu.OMFHeader_ymax_get, _magneto_cpu.OMFHeader_ymax_set)
    zmax = _swig_property(_magneto_cpu.OMFHeader_zmax_get, _magneto_cpu.OMFHeader_zmax_set)
    ValueRangeMaxMag = _swig_property(_magneto_cpu.OMFHeader_ValueRangeMaxMag_get, _magneto_cpu.OMFHeader_ValueRangeMaxMag_set)
    ValueRangeMinMag = _swig_property(_magneto_cpu.OMFHeader_ValueRangeMinMag_get, _magneto_cpu.OMFHeader_ValueRangeMinMag_set)
    meshtype = _swig_property(_magneto_cpu.OMFHeader_meshtype_get, _magneto_cpu.OMFHeader_meshtype_set)
    xbase = _swig_property(_magneto_cpu.OMFHeader_xbase_get, _magneto_cpu.OMFHeader_xbase_set)
    ybase = _swig_property(_magneto_cpu.OMFHeader_ybase_get, _magneto_cpu.OMFHeader_ybase_set)
    zbase = _swig_property(_magneto_cpu.OMFHeader_zbase_get, _magneto_cpu.OMFHeader_zbase_set)
    xstepsize = _swig_property(_magneto_cpu.OMFHeader_xstepsize_get, _magneto_cpu.OMFHeader_xstepsize_set)
    ystepsize = _swig_property(_magneto_cpu.OMFHeader_ystepsize_get, _magneto_cpu.OMFHeader_ystepsize_set)
    zstepsize = _swig_property(_magneto_cpu.OMFHeader_zstepsize_get, _magneto_cpu.OMFHeader_zstepsize_set)
    xnodes = _swig_property(_magneto_cpu.OMFHeader_xnodes_get, _magneto_cpu.OMFHeader_xnodes_set)
    ynodes = _swig_property(_magneto_cpu.OMFHeader_ynodes_get, _magneto_cpu.OMFHeader_ynodes_set)
    znodes = _swig_property(_magneto_cpu.OMFHeader_znodes_get, _magneto_cpu.OMFHeader_znodes_set)
OMFHeader_swigregister = _magneto_cpu.OMFHeader_swigregister
OMFHeader_swigregister(OMFHeader)


def readOMF(*args):
  return _magneto_cpu.readOMF(*args)
readOMF = _magneto_cpu.readOMF

def writeOMF(*args):
  return _magneto_cpu.writeOMF(*args)
writeOMF = _magneto_cpu.writeOMF

def fs_spinhall(*args):
  return _magneto_cpu.fs_spinhall(*args)
fs_spinhall = _magneto_cpu.fs_spinhall

def fs_fdm_slonchewski(*args):
  return _magneto_cpu.fs_fdm_slonchewski(*args)
fs_fdm_slonchewski = _magneto_cpu.fs_fdm_slonchewski

def dmi(*args):
  return _magneto_cpu.dmi(*args)
dmi = _magneto_cpu.dmi

def fs_dmi(*args):
  return _magneto_cpu.fs_dmi(*args)
fs_dmi = _magneto_cpu.fs_dmi
class cosinecheck(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    idx_x0 = _swig_property(_magneto_cpu.cosinecheck_idx_x0_get, _magneto_cpu.cosinecheck_idx_x0_set)
    idx_y0 = _swig_property(_magneto_cpu.cosinecheck_idx_y0_get, _magneto_cpu.cosinecheck_idx_y0_set)
    idx_z0 = _swig_property(_magneto_cpu.cosinecheck_idx_z0_get, _magneto_cpu.cosinecheck_idx_z0_set)
    r_0 = _swig_property(_magneto_cpu.cosinecheck_r_0_get, _magneto_cpu.cosinecheck_r_0_set)
    r_1 = _swig_property(_magneto_cpu.cosinecheck_r_1_get, _magneto_cpu.cosinecheck_r_1_set)
    idx_x1 = _swig_property(_magneto_cpu.cosinecheck_idx_x1_get, _magneto_cpu.cosinecheck_idx_x1_set)
    idx_y1 = _swig_property(_magneto_cpu.cosinecheck_idx_y1_get, _magneto_cpu.cosinecheck_idx_y1_set)
    idx_z1 = _swig_property(_magneto_cpu.cosinecheck_idx_z1_get, _magneto_cpu.cosinecheck_idx_z1_set)
    cos_r = _swig_property(_magneto_cpu.cosinecheck_cos_r_get, _magneto_cpu.cosinecheck_cos_r_set)
    cos_u = _swig_property(_magneto_cpu.cosinecheck_cos_u_get, _magneto_cpu.cosinecheck_cos_u_set)
    cos_f = _swig_property(_magneto_cpu.cosinecheck_cos_f_get, _magneto_cpu.cosinecheck_cos_f_set)
    def __init__(self, *args): 
        _magneto_cpu.cosinecheck_swiginit(self,_magneto_cpu.new_cosinecheck(*args))
    __swig_destroy__ = _magneto_cpu.delete_cosinecheck
cosinecheck_swigregister = _magneto_cpu.cosinecheck_swigregister
cosinecheck_swigregister(cosinecheck)

class SymmetricMatrixVectorConvolution_FFT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.SymmetricMatrixVectorConvolution_FFT_swiginit(self,_magneto_cpu.new_SymmetricMatrixVectorConvolution_FFT(*args))
    __swig_destroy__ = _magneto_cpu.delete_SymmetricMatrixVectorConvolution_FFT
SymmetricMatrixVectorConvolution_FFT.execute = new_instancemethod(_magneto_cpu.SymmetricMatrixVectorConvolution_FFT_execute,None,SymmetricMatrixVectorConvolution_FFT)
SymmetricMatrixVectorConvolution_FFT_swigregister = _magneto_cpu.SymmetricMatrixVectorConvolution_FFT_swigregister
SymmetricMatrixVectorConvolution_FFT_swigregister(SymmetricMatrixVectorConvolution_FFT)

class SymmetricMatrixVectorConvolution_Simple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.SymmetricMatrixVectorConvolution_Simple_swiginit(self,_magneto_cpu.new_SymmetricMatrixVectorConvolution_Simple(*args))
    __swig_destroy__ = _magneto_cpu.delete_SymmetricMatrixVectorConvolution_Simple
SymmetricMatrixVectorConvolution_Simple.execute = new_instancemethod(_magneto_cpu.SymmetricMatrixVectorConvolution_Simple_execute,None,SymmetricMatrixVectorConvolution_Simple)
SymmetricMatrixVectorConvolution_Simple_swigregister = _magneto_cpu.SymmetricMatrixVectorConvolution_Simple_swigregister
SymmetricMatrixVectorConvolution_Simple_swigregister(SymmetricMatrixVectorConvolution_Simple)

class AntisymmetricMatrixVectorConvolution_FFT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.AntisymmetricMatrixVectorConvolution_FFT_swiginit(self,_magneto_cpu.new_AntisymmetricMatrixVectorConvolution_FFT(*args))
    __swig_destroy__ = _magneto_cpu.delete_AntisymmetricMatrixVectorConvolution_FFT
AntisymmetricMatrixVectorConvolution_FFT.execute = new_instancemethod(_magneto_cpu.AntisymmetricMatrixVectorConvolution_FFT_execute,None,AntisymmetricMatrixVectorConvolution_FFT)
AntisymmetricMatrixVectorConvolution_FFT_swigregister = _magneto_cpu.AntisymmetricMatrixVectorConvolution_FFT_swigregister
AntisymmetricMatrixVectorConvolution_FFT_swigregister(AntisymmetricMatrixVectorConvolution_FFT)

class VectorVectorConvolution_FFT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.VectorVectorConvolution_FFT_swiginit(self,_magneto_cpu.new_VectorVectorConvolution_FFT(*args))
    __swig_destroy__ = _magneto_cpu.delete_VectorVectorConvolution_FFT
VectorVectorConvolution_FFT.execute = new_instancemethod(_magneto_cpu.VectorVectorConvolution_FFT_execute,None,VectorVectorConvolution_FFT)
VectorVectorConvolution_FFT_swigregister = _magneto_cpu.VectorVectorConvolution_FFT_swigregister
VectorVectorConvolution_FFT_swigregister(VectorVectorConvolution_FFT)


def gradient(*args):
  return _magneto_cpu.gradient(*args)
gradient = _magneto_cpu.gradient

def scaled_abs_max(*args):
  return _magneto_cpu.scaled_abs_max(*args)
scaled_abs_max = _magneto_cpu.scaled_abs_max
HAVE_FFTW_THREADS = _magneto_cpu.HAVE_FFTW_THREADS
class ButcherTableau(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.ButcherTableau_swiginit(self,_magneto_cpu.new_ButcherTableau(*args))
    __swig_destroy__ = _magneto_cpu.delete_ButcherTableau
ButcherTableau.setA = new_instancemethod(_magneto_cpu.ButcherTableau_setA,None,ButcherTableau)
ButcherTableau.getA = new_instancemethod(_magneto_cpu.ButcherTableau_getA,None,ButcherTableau)
ButcherTableau.setB = new_instancemethod(_magneto_cpu.ButcherTableau_setB,None,ButcherTableau)
ButcherTableau.getB = new_instancemethod(_magneto_cpu.ButcherTableau_getB,None,ButcherTableau)
ButcherTableau.setC = new_instancemethod(_magneto_cpu.ButcherTableau_setC,None,ButcherTableau)
ButcherTableau.getC = new_instancemethod(_magneto_cpu.ButcherTableau_getC,None,ButcherTableau)
ButcherTableau.setEC = new_instancemethod(_magneto_cpu.ButcherTableau_setEC,None,ButcherTableau)
ButcherTableau.getEC = new_instancemethod(_magneto_cpu.ButcherTableau_getEC,None,ButcherTableau)
ButcherTableau.getNumSteps = new_instancemethod(_magneto_cpu.ButcherTableau_getNumSteps,None,ButcherTableau)
ButcherTableau_swigregister = _magneto_cpu.ButcherTableau_swigregister
ButcherTableau_swigregister(ButcherTableau)


def rk_prepare_step(*args):
  return _magneto_cpu.rk_prepare_step(*args)
rk_prepare_step = _magneto_cpu.rk_prepare_step

def rk_combine_result(*args):
  return _magneto_cpu.rk_combine_result(*args)
rk_combine_result = _magneto_cpu.rk_combine_result

def rk_adjust_stepsize(*args):
  return _magneto_cpu.rk_adjust_stepsize(*args)
rk_adjust_stepsize = _magneto_cpu.rk_adjust_stepsize

def getBenchmarkRecord(*args):
  return _magneto_cpu.getBenchmarkRecord(*args)
getBenchmarkRecord = _magneto_cpu.getBenchmarkRecord

def resetBenchmark():
  return _magneto_cpu.resetBenchmark()
resetBenchmark = _magneto_cpu.resetBenchmark
class RectangularMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.RectangularMesh_swiginit(self,_magneto_cpu.new_RectangularMesh(*args))
    def __repr__(self):
      return "RectangularMesh(%r, %r, periodic_bc=%r, periodic_repeat=%r)" % (self.num_nodes, self.delta, self.periodic_bc[0], self.periodic_bc[1])

    def iterateCellIndices(self):
      """
      Returns iterator that iterates through all cell indices (x,y,z).
      Example:
        for x,y,z in mesh.iterateCellIndices():
          print(x,y,z)
      """
      import itertools
      return itertools.product(*map(range, self.num_nodes))

    __swig_destroy__ = _magneto_cpu.delete_RectangularMesh
RectangularMesh.isCompatible = new_instancemethod(_magneto_cpu.RectangularMesh_isCompatible,None,RectangularMesh)
RectangularMesh.getCellVolume = new_instancemethod(_magneto_cpu.RectangularMesh_getCellVolume,None,RectangularMesh)
RectangularMesh.getTotalNodes = new_instancemethod(_magneto_cpu.RectangularMesh_getTotalNodes,None,RectangularMesh)
RectangularMesh.getVolume = new_instancemethod(_magneto_cpu.RectangularMesh_getVolume,None,RectangularMesh)
RectangularMesh.getNumNodes = new_instancemethod(_magneto_cpu.RectangularMesh_getNumNodes,None,RectangularMesh)
RectangularMesh.getDelta = new_instancemethod(_magneto_cpu.RectangularMesh_getDelta,None,RectangularMesh)
RectangularMesh.getSize = new_instancemethod(_magneto_cpu.RectangularMesh_getSize,None,RectangularMesh)
RectangularMesh.getPeriodicBC = new_instancemethod(_magneto_cpu.RectangularMesh_getPeriodicBC,None,RectangularMesh)
RectangularMesh.getPosition = new_instancemethod(_magneto_cpu.RectangularMesh_getPosition,None,RectangularMesh)
RectangularMesh_swigregister = _magneto_cpu.RectangularMesh_swigregister
RectangularMesh_swigregister(RectangularMesh)

RectangularMesh.volume      = property(                   RectangularMesh.getVolume)
RectangularMesh.cell_volume = property(                   RectangularMesh.getCellVolume)
RectangularMesh.total_nodes = property(                   RectangularMesh.getTotalNodes)
RectangularMesh.num_nodes   = property(lambda self: tuple(RectangularMesh.getNumNodes(self)))
RectangularMesh.delta       = property(lambda self: tuple(RectangularMesh.getDelta(self)))
RectangularMesh.size        = property(lambda self: tuple(RectangularMesh.getSize(self)))
RectangularMesh.periodic_bc = property(lambda self: tuple(RectangularMesh.getPeriodicBC(self)))


class VectorField(VectorMatrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.VectorField_swiginit(self,_magneto_cpu.new_VectorField(*args))
    __swig_destroy__ = _magneto_cpu.delete_VectorField
    def __repr__(self):
      return "VectorField(%r)" % self.mesh

    def initFromFunction(self, init_fn):
      mesh = self.mesh
      for idx in range(mesh.total_nodes):
        self.set(idx, init_fn(mesh, mesh.getPosition(idx)))

    def findExtremum(self, z_slice=0, component=0): # TODO: Better name (only the xy-Plane is searched)
      import magnum.magneto as magneto
      cell = magneto.findExtremum(self, z_slice, component)
      return (
        (0.5 + cell[0]) * self.mesh.delta[0],
        (0.5 + cell[1]) * self.mesh.delta[1],
        (0.5 + cell[2]) * self.mesh.delta[2]
      )

    def interpolate(self, mesh):
         
      import magnum.magneto as magneto
      need_interpolate = (self.mesh.num_nodes != mesh.num_nodes)
      if need_interpolate:
        nx, ny, nz = mesh.num_nodes # new size (in number of cells)
        interp_mat = magneto.linearInterpolate(self, magneto.Shape(nx, ny, nz))
      else:
        interp_mat = self # no need to interpolate..

      
      result = VectorField(mesh)
      result.assign(interp_mat)
      return result


VectorField.getMesh = new_instancemethod(_magneto_cpu.VectorField_getMesh,None,VectorField)
VectorField_swigregister = _magneto_cpu.VectorField_swigregister
VectorField_swigregister(VectorField)

VectorField.mesh = property(VectorField.getMesh)


class Field(Matrix):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _magneto_cpu.Field_swiginit(self,_magneto_cpu.new_Field(*args))
    __swig_destroy__ = _magneto_cpu.delete_Field
    def __repr__(self):
      return "Field(%r)" % self.mesh

    def interpolate(self, mesh):

      need_interpolate = (self.mesh.num_nodes != mesh.num_nodes)
      if need_interpolate:
        nx, ny, nz = mesh.num_nodes # new size (in number of cells)
        interp_mat = magneto.linearInterpolate(self, magneto.Shape(nx, ny, nz))
      else:
        interp_mat = self # no need to interpolate..

      
      result = Field(mesh)
      result.assign(interp_mat)
      return result

Field.getMesh = new_instancemethod(_magneto_cpu.Field_getMesh,None,Field)
Field_swigregister = _magneto_cpu.Field_swigregister
Field_swigregister(Field)

Field.mesh = property(Field.getMesh)



def initialize(*args):
  return _magneto_cpu.initialize(*args)
initialize = _magneto_cpu.initialize

def deinitialize(*args):
  return _magneto_cpu.deinitialize(*args)
deinitialize = _magneto_cpu.deinitialize

def setDebugCallback(*args):
  return _magneto_cpu.setDebugCallback(*args)
setDebugCallback = _magneto_cpu.setDebugCallback

def callDebugFunction(*args):
  return _magneto_cpu.callDebugFunction(*args)
callDebugFunction = _magneto_cpu.callDebugFunction

def enableProfiling(*args):
  return _magneto_cpu.enableProfiling(*args)
enableProfiling = _magneto_cpu.enableProfiling

def isProfilingEnabled():
  return _magneto_cpu.isProfilingEnabled()
isProfilingEnabled = _magneto_cpu.isProfilingEnabled

def printProfilingReport():
  return _magneto_cpu.printProfilingReport()
printProfilingReport = _magneto_cpu.printProfilingReport
CUDA_DISABLED = _magneto_cpu.CUDA_DISABLED
CUDA_32 = _magneto_cpu.CUDA_32
CUDA_64 = _magneto_cpu.CUDA_64

def enableCuda(*args):
  return _magneto_cpu.enableCuda(*args)
enableCuda = _magneto_cpu.enableCuda

def isCudaEnabled():
  return _magneto_cpu.isCudaEnabled()
isCudaEnabled = _magneto_cpu.isCudaEnabled

def isCuda64Enabled():
  return _magneto_cpu.isCuda64Enabled()
isCuda64Enabled = _magneto_cpu.isCuda64Enabled

def haveCudaSupport():
  return _magneto_cpu.haveCudaSupport()
haveCudaSupport = _magneto_cpu.haveCudaSupport

def cudaSync():
  return _magneto_cpu.cudaSync()
cudaSync = _magneto_cpu.cudaSync

def haveFFTWThreads():
  return _magneto_cpu.haveFFTWThreads()
haveFFTWThreads = _magneto_cpu.haveFFTWThreads

def setFFTWThreads(*args):
  return _magneto_cpu.setFFTWThreads(*args)
setFFTWThreads = _magneto_cpu.setFFTWThreads

def flush():
  return _magneto_cpu.flush()
flush = _magneto_cpu.flush


